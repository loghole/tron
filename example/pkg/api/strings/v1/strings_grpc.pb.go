// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: example/api/strings/v1/strings.proto

package stringsV1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StringsAPIClient is the client API for StringsAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StringsAPIClient interface {
	// Method to upper
	ToUpper(ctx context.Context, in *ToUpperReq, opts ...grpc.CallOption) (*ToUpperResp, error)
	GetInfo(ctx context.Context, in *GetInfoReq, opts ...grpc.CallOption) (*GetInfoResp, error)
}

type stringsAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewStringsAPIClient(cc grpc.ClientConnInterface) StringsAPIClient {
	return &stringsAPIClient{cc}
}

func (c *stringsAPIClient) ToUpper(ctx context.Context, in *ToUpperReq, opts ...grpc.CallOption) (*ToUpperResp, error) {
	out := new(ToUpperResp)
	err := c.cc.Invoke(ctx, "/example.api.strings.v1.StringsAPI/ToUpper", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stringsAPIClient) GetInfo(ctx context.Context, in *GetInfoReq, opts ...grpc.CallOption) (*GetInfoResp, error) {
	out := new(GetInfoResp)
	err := c.cc.Invoke(ctx, "/example.api.strings.v1.StringsAPI/GetInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StringsAPIServer is the server API for StringsAPI service.
// All implementations must embed UnimplementedStringsAPIServer
// for forward compatibility
type StringsAPIServer interface {
	// Method to upper
	ToUpper(context.Context, *ToUpperReq) (*ToUpperResp, error)
	GetInfo(context.Context, *GetInfoReq) (*GetInfoResp, error)
	mustEmbedUnimplementedStringsAPIServer()
}

// UnimplementedStringsAPIServer must be embedded to have forward compatible implementations.
type UnimplementedStringsAPIServer struct {
}

func (UnimplementedStringsAPIServer) ToUpper(context.Context, *ToUpperReq) (*ToUpperResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ToUpper not implemented")
}
func (UnimplementedStringsAPIServer) GetInfo(context.Context, *GetInfoReq) (*GetInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInfo not implemented")
}
func (UnimplementedStringsAPIServer) mustEmbedUnimplementedStringsAPIServer() {}

// UnsafeStringsAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StringsAPIServer will
// result in compilation errors.
type UnsafeStringsAPIServer interface {
	mustEmbedUnimplementedStringsAPIServer()
}

func RegisterStringsAPIServer(s grpc.ServiceRegistrar, srv StringsAPIServer) {
	s.RegisterService(&StringsAPI_ServiceDesc, srv)
}

func _StringsAPI_ToUpper_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ToUpperReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StringsAPIServer).ToUpper(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/example.api.strings.v1.StringsAPI/ToUpper",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StringsAPIServer).ToUpper(ctx, req.(*ToUpperReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StringsAPI_GetInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StringsAPIServer).GetInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/example.api.strings.v1.StringsAPI/GetInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StringsAPIServer).GetInfo(ctx, req.(*GetInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

// StringsAPI_ServiceDesc is the grpc.ServiceDesc for StringsAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StringsAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "example.api.strings.v1.StringsAPI",
	HandlerType: (*StringsAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ToUpper",
			Handler:    _StringsAPI_ToUpper_Handler,
		},
		{
			MethodName: "GetInfo",
			Handler:    _StringsAPI_GetInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "example/api/strings/v1/strings.proto",
}
