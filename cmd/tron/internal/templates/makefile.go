package templates

import (
	"strings"

	"github.com/loghole/tron/cmd/tron/internal/models"
	"github.com/loghole/tron/cmd/tron/internal/project"
	"github.com/loghole/tron/cmd/tron/internal/version"
)

type TronMKData struct {
	Mainfile    string
	Dockerfile  string
	DockerImage string
	AppName     string
	ServiceName string
	TronVersion string
}

func NewTronMKData(p *project.Project) *TronMKData {
	parts := strings.Split(p.Module, "/")

	data := &TronMKData{
		Dockerfile:  models.DockerfileFilepath,
		DockerImage: p.Module,
		AppName:     p.Module,
		ServiceName: p.Name,
		Mainfile:    strings.Join([]string{models.CmdDir, p.Name, models.MainFile}, "/"),
		TronVersion: version.CliVersion,
	}

	if len(parts) > 1 {
		data.DockerImage = strings.Join(parts[len(parts)-2:], "/")
	}

	return data
}

const TronMK = `# Code generated by tron {{ .TronVersion }}. DO NOT EDIT.
# You can extend or override anything in ./Makefile

LOCAL_BIN:=$(CURDIR)/bin

DOCKERFILE   = {{ .Dockerfile }}
DOCKER_IMAGE = {{ .DockerImage }}

VERSION  := $(shell git describe --tags --always)
GIT_HASH := $(shell git rev-parse HEAD)
BUILD_TS := $(shell date +%FT%T%z)

LDFLAGS:=-X 'github.com/loghole/tron/internal/app.ServiceName={{ .ServiceName }}' \
		 -X 'github.com/loghole/tron/internal/app.AppName={{ .AppName }}' \
		 -X 'github.com/loghole/tron/internal/app.GitHash=$(GIT_HASH)' \
		 -X 'github.com/loghole/tron/internal/app.Version=$(VERSION)' \
		 -X 'github.com/loghole/tron/internal/app.BuildAt=$(BUILD_TS)'

.PHONY: .generate
.generate:
	tron generate --proto=api -v

# generate code from proto and config
.PHONY: generate
generate: .bin-deps .pb-deps .generate

# generate code from proto but without downloading proto deps
.PHONY: fast-generate
fast-generate: .generate

.PHONY: generate-config
generate-config:
	tron generate --config -v

# install proto dependencies
.PHONY: .pb-deps
.pb-deps:
	$(info #Installing proto dependencies...)
	GOBIN=$(LOCAL_BIN) go install github.com/gogo/protobuf/protoc-gen-gofast
	GOBIN=$(LOCAL_BIN) go install github.com/utrack/clay/v2/cmd/protoc-gen-goclay

.PHONY: .bin-deps
.bin-deps:
	$(info #Installing binary dependencies...)

gotest:
	go test -race -v -cover -coverprofile coverage.out ./...

lint:
	golangci-lint run -v

docker-image:
	docker build \
	-f $(DOCKERFILE) \
	-t $(DOCKER_IMAGE) \
	-t $(DOCKER_IMAGE):$(VERSION) \
	.

run-local:
	go run -ldflags "$(LDFLAGS)" {{ .Mainfile }} --local-config-enabled
`

const Makefile = `include tron.mk
`
