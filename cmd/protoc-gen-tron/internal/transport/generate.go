package transport

import (
	"fmt"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"

	"google.golang.org/protobuf/compiler/protogen"

	"github.com/loghole/tron/cmd/protoc-gen-tron/internal/version"
)

func Generate(p *protogen.Plugin, f *protogen.File) {
	var (
		contextPackage   = protogen.GoImportPath("context")
		transportPackage = protogen.GoImportPath("github.com/loghole/tron/transport")
		grpcPackage      = protogen.GoImportPath("google.golang.org/grpc")
		runtimePackage   = protogen.GoImportPath("github.com/grpc-ecosystem/grpc-gateway/v2/runtime")
	)

	swaggerData := readSwaggerFile(*f.Proto.Package, f.GeneratedFilenamePrefix)

	if len(f.Services) == 0 {
		return
	}

	var (
		service  = f.Services[0]
		descName = service.GoName + "ServiceDesc"
	)

	g := p.NewGeneratedFile(f.GeneratedFilenamePrefix+".pb.tron.go", f.GoImportPath)
	g.P("// Code generated by tron", version.CliVersion, ". DO NOT EDIT.")
	g.P()
	g.P("package ", f.GoPackageName)
	g.P()

	g.P("// ", service.GoName, "ServiceDesc is description for the ", service.GoName, "Server.")
	g.P("type ", descName, " struct {")
	g.P("svc  ", service.GoName, "Server")
	g.P("}")
	g.P()

	g.P("func New", descName, "(i ", service.GoName, "Server) ",
		g.QualifiedGoIdent(transportPackage.Ident("ServiceDesc")), " {")
	g.P("return &", descName, "{svc: i}")
	g.P("}")
	g.P()

	g.P("func(d *", descName, ") RegisterGRPC(s *", g.QualifiedGoIdent(grpcPackage.Ident("Server")), ") {")
	g.P("Register", service.GoName, "Server(s, d.svc)")
	g.P("}")
	g.P()

	g.P("func(d *", descName, ") RegisterHTTP(mux *",
		g.QualifiedGoIdent(runtimePackage.Ident("ServeMux")), ") {")
	g.P("Register", service.GoName, "HandlerServer(",
		g.QualifiedGoIdent(contextPackage.Ident("Background()")), ", mux, d.svc)")
	g.P("}")
	g.P()

	g.P("func(d *", descName, ") SwaggerDef() []byte {")
	g.P("return []byte(`", swaggerData, "`)")
	g.P("}")
	g.P()
}

func readSwaggerFile(pkg, filePrefix string) string {
	path := filepath.Join(
		"pkg",
		strings.ReplaceAll(pkg, ".", string(filepath.Separator)),
		fmt.Sprintf("%s.swagger.json", filePrefix),
	)

	data, err := ioutil.ReadFile(path)
	if err != nil {
		return "{}"
	}

	defer os.Remove(path)

	return string(data)
}
