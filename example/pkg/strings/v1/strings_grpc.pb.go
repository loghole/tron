// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package stringsV1

import (
	context "context"
	v1 "example/pkg/types/v1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// StringsClient is the client API for Strings service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StringsClient interface {
	// Method to upper
	ToUpper(ctx context.Context, in *v1.String, opts ...grpc.CallOption) (*v1.String, error)
	GetInfo(ctx context.Context, in *v1.String, opts ...grpc.CallOption) (*v1.String, error)
}

type stringsClient struct {
	cc grpc.ClientConnInterface
}

func NewStringsClient(cc grpc.ClientConnInterface) StringsClient {
	return &stringsClient{cc}
}

func (c *stringsClient) ToUpper(ctx context.Context, in *v1.String, opts ...grpc.CallOption) (*v1.String, error) {
	out := new(v1.String)
	err := c.cc.Invoke(ctx, "/strings.v1.Strings/ToUpper", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stringsClient) GetInfo(ctx context.Context, in *v1.String, opts ...grpc.CallOption) (*v1.String, error) {
	out := new(v1.String)
	err := c.cc.Invoke(ctx, "/strings.v1.Strings/GetInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StringsServer is the server API for Strings service.
// All implementations must embed UnimplementedStringsServer
// for forward compatibility
type StringsServer interface {
	// Method to upper
	ToUpper(context.Context, *v1.String) (*v1.String, error)
	GetInfo(context.Context, *v1.String) (*v1.String, error)
	mustEmbedUnimplementedStringsServer()
}

// UnimplementedStringsServer must be embedded to have forward compatible implementations.
type UnimplementedStringsServer struct {
}

func (UnimplementedStringsServer) ToUpper(context.Context, *v1.String) (*v1.String, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ToUpper not implemented")
}
func (UnimplementedStringsServer) GetInfo(context.Context, *v1.String) (*v1.String, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInfo not implemented")
}
func (UnimplementedStringsServer) mustEmbedUnimplementedStringsServer() {}

// UnsafeStringsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StringsServer will
// result in compilation errors.
type UnsafeStringsServer interface {
	mustEmbedUnimplementedStringsServer()
}

func RegisterStringsServer(s *grpc.Server, srv StringsServer) {
	s.RegisterService(&_Strings_serviceDesc, srv)
}

func _Strings_ToUpper_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.String)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StringsServer).ToUpper(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/strings.v1.Strings/ToUpper",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StringsServer).ToUpper(ctx, req.(*v1.String))
	}
	return interceptor(ctx, in, info, handler)
}

func _Strings_GetInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.String)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StringsServer).GetInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/strings.v1.Strings/GetInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StringsServer).GetInfo(ctx, req.(*v1.String))
	}
	return interceptor(ctx, in, info, handler)
}

var _Strings_serviceDesc = grpc.ServiceDesc{
	ServiceName: "strings.v1.Strings",
	HandlerType: (*StringsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ToUpper",
			Handler:    _Strings_ToUpper_Handler,
		},
		{
			MethodName: "GetInfo",
			Handler:    _Strings_GetInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "strings.proto",
}
